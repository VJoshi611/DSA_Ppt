# Assignment Questions 6


ðŸ’¡ **Question 1**

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"
**Output:**
[0,4,1,3,2]

------>

class Solution:
    def diStringMatch(self, arr: str) -> List[int]:
        lenn = len(arr)
        i = 0
        j = lenn
        final = []

        for k in range(lenn):
            if arr[k] == "D":
                final.append(j)
                j -= 1
            else:
                final.append(i)
                i += 1
        if arr[lenn-1] == "I":
            final.append(i)
        else:
            final.append(j)

        return final
____________________________________________________________________________________________________
ðŸ’¡ **Question 2**

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.

**Example 1:**

**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
**Output:** true

------>

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        R, C = len(matrix), len(matrix[0])
        l, r = 0, R*C-1

        while l <= r:
            mid = l + (r-l)//2
            row, col = mid // C, mid % C
            if matrix[row][col] < target:
                l = mid + 1
            elif matrix[row][col] > target:
                r = mid - 1
            else:
                return True

        return False
____________________________________________________________________________________________________
ðŸ’¡ **Question 3**

Given an array of integers arr, return *true if and only if it is a valid mountain array*.
Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

**Example 1:**

**Input:** arr = [2,1]
**Output:** false

------>

class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        if len(arr) >=3 :
            
            peak = arr.index(max(arr))
            
            if peak!=0 and peak!=len(arr)-1:
                
                left = arr[:peak]
                left_s = sorted(left)

                right = arr[peak:]
                right_s = sorted(right,reverse=True)

                RA = len(right_s)
                RB = len(set(right))
                LA = len(left_s)
                LB = len(set(left))

                if left_s == left and LA == LB and right_s == right and RA == RB:
                    return True
                else:
                    return False
            else:
                return False
        else:
            return False
____________________________________________________________________________________________________
ðŸ’¡ **Question 4**

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]
**Output:** 2

**Explanation:**
[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

------>

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        max = 0
        ps = 0
        prefix_sum_at_idx = {0: 0}
        for i, n in enumerate(nums):
            ps = ps+1 if n == 1 else ps-1
            
            if ps in prefix_sum_at_idx:
                res = max(res, i - prefix_sum_at_idx[ps] + 1)
            else:
                prefix_sum_at_idx[ps] = i+1
                
        return res
____________________________________________________________________________________________________
ðŸ’¡ **Question 5**

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]
**Output:** 40

**Explanation:**

We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

------>
class Solution:
    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        nums1.sort()
        nums2.sort()
        n, res = len(nums1), 0
        for i in range(n):
            res += nums1[i] * nums2[n - i - 1]
        return res

____________________________________________________________________________________________________
ðŸ’¡ **Question 6**

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]
**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

----->

class Solution:
    def findOriginalArray(self, changed: List[int]) -> List[int]:
       
        if len(changed) % 2: return []
        changed.sort()
        C = Counter(changed)
        ans = []
        for x in changed:
            # if the frequency of x is zero then skip.
            if C[x]==0: continue
            # if double of current item is not in C or frequency of it is less than double of it return []
            if 2*x not in C or C[x] > C[2*x]:
                return []
            # decrease the frequencies of x and 2x
            C[2*x] -= 1
            C[x]-=1
            ans.append(x)
        return ans
        
____________________________________________________________________________________________________
ðŸ’¡ **Question 7**

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

**Example 1:**

**Input:** n = 3
**Output:** [[1,2,3],[8,9,4],[7,6,5]]

------>

class Solution {
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        int r = 0, c = 0, dr = 0, dc = 1;
        for (int current = 1; current <= n * n; current++) {
            matrix[r][c] = current;
            if (r + dr >= matrix.length || r + dr < 0
                    || c + dc >= matrix[0].length || c + dc < 0
                    || matrix[r + dr][c + dc] != 0
            ) {
                int temp = dc;
                dc = -dr;
                dr = temp;
            }
            r += dr;
            c += dc;
        }
        return matrix;
    }
}

______________________________________________________________________________________
ðŸ’¡ **Question 8**

Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

**Example 1:**

**Input:** mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]
**Output:**

[[7,0,0],[-7,0,3]]

------>

class Solution:
    def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:
        r, c1, c2 = len(mat1), len(mat1[0]), len(mat2[0])
        res = [[0] * c2 for _ in range(r)]
        for i in range(r):
            for j in range(c2):
                for k in range(c1):
                    res[i][j] += mat1[i][k] * mat2[k][j]
        return res
