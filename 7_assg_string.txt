# Assignment Questions 7

ðŸ’¡ **Question 1**

Given two strings s and t, *determine if they are isomorphic*.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = "egg", t = "add"
**Output:** true

---->

# Time Complexity : O(n)
class Solution(object):
    def isIsomorphic(self, s, t):
        map1 = []
        map2 = []
        for idx in s:
            map1.append(s.index(idx))
        for idx in t:
            map2.append(t.index(idx))
        if map1 == map2:
            return True
        return False

__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 2**

Given a string num which represents an integer, return true *if* num *is a **strobogrammatic number***.
A **strobogrammatic number** is a number that looks the same when rotated 180 degrees (looked at upside down).

**Example 1:**
**Input:** num = "69"
**Output:**
true

----->

class Solution(object):
    def isStrobogrammatic(self, num):
      
        maps = {("0", "0"), ("1", "1"), ("6", "9"), ("8", "8"), ("9", "6")}
        i,j = 0, len(num) - 1
        while i <= j:
            if (num[i], num[j]) not in maps:
                return False
            i += 1
            j -= 1
        return True
__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 3**

Given two non-negative integers, num1 and num2 represented as string, return *the sum of* num1 *and* num2 *as a string*.
You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

**Example 1:**

**Input:** num1 = "11", num2 = "123"
**Output:**
"134"

---->
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        def func(n):
            value = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}
            result = 0
            for digit in n:
                result = 10 * result + value[digit]

            return result

        ans = func(num1) + func(num2)
        return str(ans)
__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 4**

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

**Example 1:**

**Input:** s = "Let's take LeetCode contest"

**Output:** "s'teL ekat edoCteeL tsetnoc"

---->

class Solution:
    def reverseWords(self, s: str) -> str:
        words=s.split()
        ans = ""
        for  i in range(len(words)):
            ans += words[i][::-1]
            if i != len(words)-1:
                ans+=" "
        return ans
__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 5**

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

**Example 1:**

**Input:** s = "abcdefg", k = 2
**Output:**
"bacdfeg"

------>

class Solution:
    def reverseStr(self, s: str, k: int) -> str:
        temp = []
        first = 0
        last = k-1                 
        while (first <= len(s)-1):     
            if last > len(s)-1:
                last = len(s) - 1
            while(last >= first): 
                temp.append(s[last])  
                last = last - 1
            first = first + k                 
            last = first + (k-1)
            while(last >= first):
                if first > len(s)-1:
                    break
                temp.append(s[first])  
                first = first + 1                
            last = first + (k-1)       
        return ''.join(temp)
            


__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 6**

Given two strings s and goal, return true *if and only if* s *can become* goal *after some number of **shifts** on* s.
A **shift** on s consists of moving the leftmost character of s to the rightmost position.

- For example, if s = "abcde", then it will be "bcdea" after one shift.

**Example 1:**
**Input:** s = "abcde", goal = "cdeab"
**Output:**
true

---->
"""
KMP algorithm
time: O(N)
space: O(N)
"""

class Solution:
    def rotateString(self, A: str, B: str) -> bool:
        if len(A) != len(B): return False
        if len(A) == 0: return True
        
        # capture length of strings
        # then make both strings 1 indexed
        N = len(A)
        A = " " + A + A
        B = " " + B
        
        # calculate pi table, it captures the length of the
		# longest prefix that is also the suffix
        pi = [0] * (N+1)
        left, pi[0] = -1, -1
        for right in range(1, N+1):
            while left >= 0 and B[left + 1] != B[right]:
                left = pi[left]
            left += 1
            pi[right] = left
        
        # do matching
        j = 0
        for i in range(1, (2*N)+1):
            while j >= 0 and B[j+1] != A[i]:
                j = pi[j]
            j += 1
            if j == N: return True
        
        return False
        

__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 7**

Given two strings s and t, return true *if they are equal when both are typed into empty text editors*. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

**Example 1:**
**Input:** s = "ab#c", t = "ad#c"
**Output:** true
**Explanation:**
Both s and t become "ac".

--->
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        s_backspaced = []
        t_backspaced = []
        
        for i in range(len(s)):
            if s[i] == '#':
                if s_backspaced:
                    s_backspaced.pop()
            else:
                s_backspaced.append(s[i])
            
        for i in range(len(t)):
            if t[i] == '#':
                if t_backspaced:
                    t_backspaced.pop()
            else:
                t_backspaced.append(t[i])
        
        return s_backspaced == t_backspaced

__________________________________________________________________________________________________________________________
ðŸ’¡ **Question 8**

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

**Example 1:**
**Input:** coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
**Output:** true

--->

class Solution:
    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        n = len(coordinates)

        x1, y1 = coordinates[0]
        x2, y2 = coordinates[1]

        for i in range(2, n):
            x, y = coordinates[i]

            if (y - y1) * (x - x2) != (y - y2) * (x - x1):
                return False

        return True